name: Sync to Public Repo
on: 
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get public repo name
        id: repo-name
        run: |
          PUBLIC_NAME=$(echo "${{ github.repository }}" | sed -E 's/.*\///; s/(_Pro|-Private)//g')
          echo "REPO_URL=${{ github.repository_owner }}/${PUBLIC_NAME}" >> $GITHUB_OUTPUT
          echo "REPO_NAME=${PUBLIC_NAME}" >> $GITHUB_OUTPUT
          echo "🔷 Public repo: ${{ github.repository_owner }}/${PUBLIC_NAME}"

      - name: Configure git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n "x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}" | base64 -w0)"

      - name: Prepare public repo
        id: prepare-repo
        run: |
          if git clone "https://x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/${{ steps.repo-name.outputs.REPO_URL }}" ../public-repo 2>/dev/null; then
            echo "🔷 Existing repo cloned"
            echo "IS_NEW_REPO=false" >> $GITHUB_OUTPUT
          else
            echo "🔷 Initializing new repo"
            mkdir -p ../public-repo
            cd ../public-repo
            git init
            git remote add origin "https://x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/${{ steps.repo-name.outputs.REPO_URL }}"
            git checkout -b main
            cd -
            echo "IS_NEW_REPO=true" >> $GITHUB_OUTPUT
            
            # Create minimal files for new repo
            echo "# ${{ steps.repo-name.outputs.REPO_NAME }}" > ../public-repo/README.md
            echo "Project synchronized from private repository" >> ../public-repo/README.md
            curl -s https://api.github.com/licenses/mit | jq -r '.body' > ../public-repo/LICENSE
          fi

      - name: Backup important files
        run: |
          mkdir -p ../backup
          for file in README.md LICENSE .github/ISSUE_TEMPLATE/* .github/PULL_REQUEST_TEMPLATE.md .github/CODEOWNERS .github/CODE_OF_CONDUCT.md; do
            if [ -f "../public-repo/$file" ]; then
              cp "../public-repo/$file" "../backup/$file"
            fi
          done

      - name: Sync files with advanced filters
        run: |
          rsync -av --delete \
            --exclude='.git/' \
            --exclude='.github/workflows/' \
            --exclude='node_modules/' \
            --exclude='.env*' \
            --exclude='*.secret*' \
            --exclude='*.key*' \
            --exclude='*.pem' \
            --exclude='credentials*' \
            --exclude='docker-compose.override.yml' \
            --include='.github/ISSUE_TEMPLATE/***' \
            --include='.github/projects/***' \
            --include='docs/***' \
            --include='src/***' \
            ./ ../public-repo/

      - name: Restore important files
        run: |
          for file in ../backup/*; do
            if [ -f "$file" ]; then
              dest="../public-repo/$(basename "$file")"
              mkdir -p "$(dirname "$dest")"
              cp "$file" "$dest"
            fi
          done
          rm -rf ../backup

      - name: Auto-generate public README
        if: steps.prepare-repo.outputs.IS_NEW_REPO == 'true'
        run: |
          echo "🔄 Generating public README"
          echo "# ${{ steps.repo-name.outputs.REPO_NAME }}" > ../public-repo/README.md
          echo "" >> ../public-repo/README.md
          echo "## 🔒 About" >> ../public-repo/README.md
          echo "This is the public version of a private project. Some files may be excluded for security reasons." >> ../public-repo/README.md
          echo "" >> ../public-repo/README.md
          echo "## 📦 Included Content" >> ../public-repo/README.md
          echo "- Core application code" >> ../public-repo/README.md
          echo "- Documentation" >> ../public-repo/README.md
          echo "- Issue templates" >> ../public-repo/README.md
          echo "" >> ../public-repo/README.md
          echo "## ⚠️ Notice" >> ../public-repo/README.md
          echo "This repository is automatically synchronized from the private source. Do not make direct changes here." >> ../public-repo/README.md

      - name: Commit and push changes
        id: commit
        run: |
          cd ../public-repo
          git add -A
          if ! git diff-index --quiet HEAD --; then
            git commit -m "🔀 Sync from private repo [$(date +'%Y-%m-%d %H:%M:%S')]"
            git push origin main --force-with-lease
            echo "🟢 Sync completed"
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
          else
            echo "🟡 No changes to sync"
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
          fi

      - name: Create/Update sync status issue
        if: steps.commit.outputs.HAS_CHANGES == 'true'
        run: |
          cd ../public-repo
          SYNC_ISSUE_TITLE="🔄 Sync Status - ${{ steps.repo-name.outputs.REPO_NAME }}"
          SYNC_BODY="### Last Sync Details\n\n- **Time**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n- **Triggered by**: ${{ github.actor }}\n- **Commit**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
          
          # Check if sync issue already exists
          EXISTING_ISSUE=$(gh api "repos/${{ steps.repo-name.outputs.REPO_URL }}/issues" --jq '.[] | select(.title == "'"$SYNC_ISSUE_TITLE"'") | .number' || true)
          
          if [ -z "$EXISTING_ISSUE" ]; then
            gh issue create --title "$SYNC_ISSUE_TITLE" --body "$SYNC_BODY" --repo "${{ steps.repo-name.outputs.REPO_URL }}"
          else
            gh issue comment "$EXISTING_ISSUE" --body "$SYNC_BODY\n\n---\n\n*This comment was automatically generated*" --repo "${{ steps.repo-name.outputs.REPO_URL }}"
          fi

      - name: Post sync summary
        run: |
          echo "### 🏁 Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Public Repo**: [${{ steps.repo-name.outputs.REPO_URL }}](https://github.com/${{ steps.repo-name.outputs.REPO_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $([ ${{ steps.commit.outputs.HAS_CHANGES }} == 'true' ] && echo '🟢 Changes pushed' || echo '🟡 No changes')" >> $GITHUB_STEP_SUMMARY
          echo "- **New Repo**: $([ ${{ steps.prepare-repo.outputs.IS_NEW_REPO }} == 'true' ] && echo 'Yes' || echo 'No')" >> $GITHUB_STEP_SUMMARY
          echo "- **Sync Time**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY